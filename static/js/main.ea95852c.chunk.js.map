{"version":3,"sources":["Containers/iGo/logo.svg","Containers/MainMenu/MainMenu.js","Containers/iGo/iGo.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","MainMenu","_Component","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","apply","arguments","inherits","createClass","key","value","react_default","a","createElement","className","Component","iGo","react_router_dom","react_router","exact","path","to","type","alt","src","logo","component","ButtonContainer","_Component2","props","_this","call","goBack","bind","assertThisInitialized","location","pathname","history","console","debug","onClick","App","iGo_iGo_iGo","Boolean","window","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"4EAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,0UCG3BC,SAAb,SAAAC,GAAA,SAAAD,IAAA,OAAAE,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,GAAAE,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,MAAAH,KAAAI,YAAA,OAAAN,OAAAO,EAAA,EAAAP,CAAAF,EAAAC,GAAAC,OAAAQ,EAAA,EAAAR,CAAAF,EAAA,EAAAW,IAAA,SAAAC,MAAA,WAEI,OACEC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,YAAf,iBAHNhB,EAAA,CAA8BiB,cCITC,mLAEjB,OACEL,EAAAC,EAAAC,cAACI,EAAA,EAAD,KACEN,EAAAC,EAAAC,cAAA,OAAKC,UAAW,OACdH,EAAAC,EAAAC,cAACK,EAAA,EAAD,KACEP,EAAAC,EAAAC,cAACK,EAAA,EAAD,CAAOC,OAAK,EAACC,KAAM,KACjBT,EAAAC,EAAAC,cAACI,EAAA,EAAD,CAAMI,GAAI,SACRV,EAAAC,EAAAC,cAAA,SACES,KAAM,QACNC,IAAK,OACLC,IAAKC,IACLX,UAAW,aALf,2EAUFH,EAAAC,EAAAC,cAACK,EAAA,EAAD,CAAOE,KAAM,QACXT,EAAAC,EAAAC,cAAA,qCAIFF,EAAAC,EAAAC,cAACK,EAAA,EAAD,CAAOE,KAAM,QAASM,UAAW5B,MAGrCa,EAAAC,EAAAC,cAACK,EAAA,EAAD,CAAOE,KAAM,IAAKM,UAAWC,YAzBJZ,aA+BpBY,EAAb,SAAAC,GACE,SAAAD,EAAYE,GAAM,IAAAC,EAAA,OAAA9B,OAAAC,EAAA,EAAAD,CAAAE,KAAAyB,IAChBG,EAAA9B,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAA2B,GAAAI,KAAA7B,KAAM2B,KACDG,OAASF,EAAKE,OAAOC,KAAZjC,OAAAkC,EAAA,EAAAlC,CAAA8B,IAFEA,EADpB,OAAA9B,OAAAO,EAAA,EAAAP,CAAA2B,EAAAC,GAAA5B,OAAAQ,EAAA,EAAAR,CAAA2B,EAAA,EAAAlB,IAAA,SAAAC,MAAA,WAOwC,UAAjCR,KAAK2B,MAAMM,SAASC,UAAyD,MAAjClC,KAAK2B,MAAMM,SAASC,UACjElC,KAAK2B,MAAMQ,QAAQL,WARzB,CAAAvB,IAAA,SAAAC,MAAA,WAcI,OAFA4B,QAAQC,MAAM,2BAA4BrC,KAAK2B,OAG7ClB,EAAAC,EAAAC,cAAA,OAAKC,UAAW,oBACdH,EAAAC,EAAAC,cAACI,EAAA,EAAD,CAAMI,GAAI,KACRV,EAAAC,EAAAC,cAAA,uBAIFF,EAAAC,EAAAC,cAAA,UAAQ2B,QAAStC,KAAK8B,QAAtB,aArBRL,EAAA,CAAqCZ,aCtBtB0B,mLARX,OACE9B,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAC6B,EAAD,cAJU3B,aCME4B,QACW,cAA7BC,OAAOT,SAASU,UAEe,UAA7BD,OAAOT,SAASU,UAEhBD,OAAOT,SAASU,SAASC,MACvB,2DCZNC,IAASC,OAAOrC,EAAAC,EAAAC,cAACoC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.ea95852c.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React , {Component} from 'react';\nimport \"./MainMenu.css\"\n\nexport class MainMenu extends Component {\n  render() {\n    return(\n      <div className=\"MainMenu\">\n        Main Menu\n      </div>\n    );\n  }\n}","import React, { Component } from 'react';\nimport { BrowserRouter as Router, Link, Route, Switch } from 'react-router-dom';\n\nimport \"./iGo.css\"\nimport logo from \"./logo.svg\"\nimport { MainMenu } from \"../MainMenu/MainMenu\";\n\nexport default class iGo extends Component {\n  render() {\n    return(\n      <Router>\n        <div className={\"iGo\"}>\n          <Switch>\n            <Route exact path={\"/\"}>\n              <Link to={\"/menu\"}>\n                <input\n                  type={\"image\"}\n                  alt={\"logo\"}\n                  src={logo}\n                  className={\"App-logo\"}\n                />\n                Test check mic 1 2 3 going overboard and it all stays inside this box!\n              </Link>\n            </Route>\n            <Route path={\"/igo\"}>\n              <h1>\n                Press HOME to turn ON!\n              </h1>\n            </Route>\n            <Route path={\"/menu\"} component={MainMenu}/>\n          </Switch>\n        </div>\n        <Route path={\"/\"} component={ButtonContainer}/>\n      </Router>\n    );\n  }\n}\n\nexport class ButtonContainer extends Component {\n  constructor(props){\n    super(props);\n    this.goBack = this.goBack.bind(this);\n  }\n\n  goBack(){\n    if(this.props.location.pathname !== \"/igo/\" && this.props.location.pathname !== \"/\")\n      this.props.history.goBack();\n  }\n\n  render() {\n    console.debug(\"Button Container Props: \", this.props);\n\n    return (\n      <div className={\"Button-container\"}>\n        <Link to={\"/\"}>\n          <button>\n            HOME\n          </button>\n        </Link>\n        <button onClick={this.goBack}>\n          BACK\n        </button>\n      </div>\n    )\n  }\n}","import React, { Component } from 'react';\nimport './App.css';\n\n// IGo with capitalized I because React Components need to start with capitalized letter\nimport IGo from \"./Containers/iGo/iGo\";\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <IGo/>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}